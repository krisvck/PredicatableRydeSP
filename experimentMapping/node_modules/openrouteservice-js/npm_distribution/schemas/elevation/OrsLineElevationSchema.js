'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var schema = _joi2.default.object().keys({
  api_key: _joi2.default.string().description('Your openrouteservice API key'),
  format_in: _joi2.default.string().valid(['geojson', 'encodedpolyline', 'polyline']).description('The input format geometry.'),
  format_out: _joi2.default.string().valid(['geojson', 'encodedpolyline', 'polyline']).description('The output format geometry.'),
  geometry: _joi2.default.any().when('format_in', {
    is: _joi2.default.string().regex(/^geojson$/),
    then: _joi2.default.object().keys({
      type: _joi2.default.string().valid(['LineString']).description('The type of GeoJSON'),
      coordinates: _joi2.default.array().description('The coordinates of the GeoJSON LineString object.')
    })
  }).when('format_in', {
    is: _joi2.default.string().regex(/^polyline$/),
    then: _joi2.default.array().min(1).max(2000).items(_joi2.default.array().length(2).items(_joi2.default.number()).required()).required().description('The list of coordinate tuples.')
  }).when('format_in', {
    is: _joi2.default.string().regex(/^encodedpolyline$/),
    then: _joi2.default.string().required().description('The encoded polyline as input.')
  }).required().description('GeoJSON object'),
  dataset: _joi2.default.string().valid(['srtm']).default('srtm').description('The dataset used to return elevation data.'),
  host: _joi2.default.string().default('https://api.openrouteservice.org/elevation/line').description('Determines the API url.'),
  mime_type: _joi2.default.string().valid(['application/json']).default('application/json').description('Determines the mime type of request.')
}).unknown(false);

exports.default = schema;